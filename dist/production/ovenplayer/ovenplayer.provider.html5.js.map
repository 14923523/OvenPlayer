{"version":3,"sources":["webpack:///./src/js/api/provider/html5/Html5.js","webpack:///./src/js/api/provider/Core.js","webpack:///./src/js/api/provider/Listener.js"],"names":["__webpack_require__","_constants","element","playerConfig","that","_Core2","default","PROVIDER_HTML5","super_destroy","super","OvenPlayerConsole","log","destroy","providerName","extendedElement","onLoad","_extends","on","Events","once","off","trigger","elVideo","_","isElement","PROVIDER_DASH","getVideoElement","PROVIDER_HLS","media","extractVideoElement","listener","_Listener2","canSeek","seeking","state","STATE_IDLE","buffer","currentQuality","sources","posterImage","getConfig","image","playbackRate","defaultPlaybackRate","getDefaultPlaybackRate","setQualityLevelBySources","quality","Math","max","i","length","getQualityLabel","label","pickQuality","_load","lastPlayPosition","source","previousSource","src","sourceElement","document","createElement","file","load","currentTime","seek","play","CONTENT_LEVELS","poster","getCurrentSource","setCanSeek","canSeek_","isSeeking","setSeeking","seeking_","setPlayerElement","setState","newState","prevState","STATE_COMPLETE","PLAYER_COMPLETE","STATE_PAUSED","PLAYER_PAUSE","STATE_PLAYING","PLAYER_PLAY","PLAYER_STATE","prevstate","newstate","getState","setBuffer","newBuffer","getBuffer","getDuration","isLive","duration","Infinity","isDynamic","getPosition","setVolume","volume","getVolume","setMute","muted","CONTENT_MUTE","mute","getMute","preload","sources_","starttime","pause","position","setPlaybackRate","PLAYBACK_RATE_CHANGED","getPlaybackRate","getQualityLevels","qualityLevels","map","bitrate","width","height","getQualityLevel","getCurrentQuality","setCurrentQuality","qualityIndex","needLoad","CONTENT_LEVEL_CHANGED","setQualityLabel","stop","removeAttribute","firstChild","removeChild","name","method","apply","arguments","provider","lowLevelEvents","canplay","CONTENT_BUFFER_FULL","durationchange","progress","ended","CONTENT_COMPLETE","loadeddata","loadedmetadata","type","metadata","CONTENT_META","STATE_ERROR","error","paused","STATE_LOADING","playing","timeRanges","buffered","num","min","between","end","CONTENT_BUFFER","bufferPercent","stalled","timeupdate","isNaN","CONTENT_TIME","resize","CONTENT_SEEK","seeked","CONTENT_SEEKED","waiting","STATE_STALLED","volumechange","round","CONTENT_VOLUME","code","errorCodeGen","0","PLAYER_UNKNWON_ERROR","reason","message","1","PLAYER_UNKNWON_OPERATION_ERROR","2","PLAYER_UNKNWON_NEWWORK_ERROR","3","PLAYER_UNKNWON_DECODE_ERROR","4","PLAYER_FILE_ERROR","ERROR","onError","Object","keys","forEach","eventName","removeEventListener","addEventListener"],"mappings":";0IAAA,wDAAAA,EAAA,KAEAC,EAAAD,EAAA,aAQc,SAASE,EAASC,GAE5B,IAAIC,GAAO,EAAAC,EAAAC,SAAaC,iBAAgBL,EAASC,GAE7CK,EAAiBJ,EAAKK,MAAM,WAShC,OARAC,kBAAkBC,IAAI,0BAEtBP,EAAKQ,QAAU,WACXJ,IAEAE,kBAAkBC,IAAI,gCAGnBP,iQCpBXJ,EAAA,QACAA,EAAA,KACAC,EAAAD,EAAA,OAMAA,EAAA,MACAA,EAAA,iEAqBa,SAAUa,EAAcC,EAAiBX,EAAcY,GAChEL,kBAAkBC,IAAI,iBAEtB,IAAIP,EAAOY,GACPC,GAAIC,UAAOD,GACXE,KAAMD,UAAOC,KACbC,IAAKF,UAAOE,IACZC,QAASH,UAAOG,UAIhBC,EA9BkB,SAAST,EAAcC,GAC7C,OAAGS,UAAEC,UAAUV,GACJA,EAERD,IAAiBY,gBACTX,EAAgBY,kBAClBb,IAAiBc,eACfb,EAAgBc,MAEpB,KAqBOC,CAAoBhB,EAAcC,GAC5CgB,GAAW,EAAAC,EAAAzB,SAAeO,EAAcC,EAAiBQ,EAASlB,GAClE4B,GAAU,EACVC,GAAU,EACVC,EAAQC,aACRC,EAAS,EACTC,GAAkB,EAClBC,KAGAC,EAAcpC,EAAaqC,YAAYC,OAAO,GAClDnB,EAAQoB,aAAepB,EAAQqB,oBAAsBxC,EAAayC,yBAElE,IAAMC,EAA2B,SAACP,GAiB9BD,EAhBoB,SAACC,GACjB,IAAIQ,EAAUC,KAAKC,IAAI,EAAGX,GAE1B,GAAIC,EACA,IAAK,IAAIW,EAAI,EAAGA,EAAIX,EAAQY,OAAQD,IAIhC,GAHIX,EAAQW,GAAG3C,UACXwC,EAAUG,GAEV9C,EAAagD,mBAAqBb,EAAQW,GAAGG,QAAUjD,EAAagD,kBACpE,OAAOF,EAInB,OAAOH,EAGMO,CAAYf,IAG3BgB,EAAQ,SAACC,GACX,IAAMC,EAAUlB,EAAQD,GACxB,GAAGtB,EACCA,EAAOyC,EAAQD,OACd,CACD7C,kBAAkBC,IAAI,mBAAoB6C,EAAQ,sBAAuBD,GACzE,IAAIE,EAAiBnC,EAAQoC,IACvBC,EAAgBC,SAASC,cAAc,UAE7CF,EAAcD,IAAMF,EAAOM,KACJH,EAAcD,MAAQD,GAEzCnC,EAAQoC,IAAMpB,EAAQD,GAAgByB,KAElCL,GACAnC,EAAQyC,QAEa,GAApBR,GAAyBjC,EAAQ0C,YAAc,GACpD5D,EAAK6D,KAAKV,GAEXA,EAAmB,IAClBnD,EAAK6D,KAAKV,GACVnD,EAAK8D,QAET9D,EAAKiB,QAAQ8C,kBACT9B,eAAgBA,IAGjBE,IACCjB,EAAQ8C,OAAS7B,KAsN7B,OAhNAnC,EAAKiE,iBAAmB,WAEpB,OADA3D,kBAAkBC,IAAI,6BAA8B2B,EAAQD,IACrDC,EAAQD,IAGnBjC,EAAK4B,QAAU,WAA6D,OAArDtB,kBAAkBC,IAAI,oBAAqBqB,GAAiBA,GACnF5B,EAAKkE,WAAa,SAACC,GAAgB7D,kBAAkBC,IAAI,uBAAwB4D,GAAYvC,EAAUuC,GAEvGnE,EAAKoE,UAAY,WAA4D,OAAvD9D,kBAAkBC,IAAI,sBAAuBsB,GAAiBA,GACpF7B,EAAKqE,WAAa,SAACC,GAAahE,kBAAkBC,IAAI,uBAAwB+D,GAAWzC,EAAUyC,GAKnGtE,EAAKuE,iBAAmB,SAACzE,GACrBQ,kBAAkBC,IAAI,6BAA8BT,GACpDoB,EAAUpB,GAGdE,EAAKwE,SAAW,SAACC,GACb,GAAG3C,GAAS2C,EAAS,CACjB,IAAIC,EAAY5C,EAChB,OAAO2C,GACH,KAAKE,iBACD3E,EAAKiB,QAAQ2D,mBACb,MACJ,KAAKC,eACD7E,EAAKiB,QAAQ6D,gBACTJ,UAAW5C,IAEf,MACJ,KAAKiD,gBACD/E,EAAKiB,QAAQ+D,eACTN,UAAW5C,IAIvBA,EAAO2C,EACPnE,kBAAkBC,IAAI,qBAAsBuB,GAC5C9B,EAAKiB,QAAQgE,gBACTC,UAAWR,EACXS,SAAUrD,MAItB9B,EAAKoF,SAAW,WAEZ,OADA9E,kBAAkBC,IAAI,qBAAsBuB,GACrCA,GAEX9B,EAAKqF,UAAY,SAACC,GACdhF,kBAAkBC,IAAI,sBAAuB+E,GAC7CtD,EAASsD,GAEbtF,EAAKuF,UAAY,WAEb,OADAjF,kBAAkBC,IAAI,sBAAuByB,GACtCA,GAEXhC,EAAKwF,YAAc,WAEf,IAAIC,EAAUvE,EAAQwE,UAAYC,KAAkBlF,IAAiBY,iBAAeX,EAAgBkF,YAEpG,OADAtF,kBAAkBC,IAAI,wBAAyBkF,EAAUE,IAAWzE,EAAQwE,UACrED,EAAUE,IAAWzE,EAAQwE,UAExC1F,EAAK6F,YAAc,WAEf,OADAvF,kBAAkBC,IAAI,wBAAyBW,EAAQ0C,aAChD1C,EAAQ0C,aAEnB5D,EAAK8F,UAAY,SAACC,GACdzF,kBAAkBC,IAAI,sBAAuBwF,GAC7C7E,EAAQ6E,OAASA,EAAO,KAE5B/F,EAAKgG,UAAY,WAEb,OADA1F,kBAAkBC,IAAI,sBAAsC,IAAfW,EAAQ6E,QAC/B,IAAf7E,EAAQ6E,QAEnB/F,EAAKiG,QAAU,SAACnE,GAmBZ,YAjBqB,IAAVA,GAEPZ,EAAQgF,OAAShF,EAAQgF,MAEzBlG,EAAKiB,QAAQkF,gBACTC,KAAMlF,EAAQgF,UAKlBhF,EAAQgF,MAAQpE,EAEhB9B,EAAKiB,QAAQkF,gBACTC,KAAMlF,EAAQgF,SAGtB5F,kBAAkBC,IAAI,oBAAqBW,EAAQgF,OAC5ChF,EAAQgF,OAEnBlG,EAAKqG,QAAU,WAEX,OADA/F,kBAAkBC,IAAI,oBAAqBW,EAAQgF,OAC5ChF,EAAQgF,OAGnBlG,EAAKsG,QAAU,SAACC,EAAUpD,GACtB7C,kBAAkBC,IAAI,oBAAqBgG,EAAUpD,GAErDV,EADAP,EAAUqE,GAEVrD,EAAMC,GAAoB,IAE9BnD,EAAK2D,KAAO,SAAC4C,GACTjG,kBAAkBC,IAAI,iBAAkBgG,GAExC9D,EADAP,EAAUqE,GAEVrD,EAAMqD,EAASC,WAAa,IAGhCxG,EAAK8D,KAAO,WACRxD,kBAAkBC,IAAI,kBAClBP,EAAKoF,aAAeL,iBACpB7D,EAAQ4C,QAGhB9D,EAAKyG,MAAQ,WACTnG,kBAAkBC,IAAI,mBAClBP,EAAKoF,YAAcL,iBACnB7D,EAAQuF,SAGhBzG,EAAK6D,KAAO,SAAC6C,GACTpG,kBAAkBC,IAAI,iBAAkBmG,GACxCxF,EAAQ0C,YAAc8C,GAE1B1G,EAAK2G,gBAAkB,SAACrE,GAGpB,OAFAtC,EAAKiB,QAAQ2F,yBAAwBtE,aAAeA,IACpDhC,kBAAkBC,IAAI,4BAA6B+B,GAC5CpB,EAAQoB,aAAepB,EAAQqB,oBAAsBD,GAEhEtC,EAAK6G,gBAAkB,WAEnB,OADAvG,kBAAkBC,IAAI,4BAA6BW,EAAQoB,cACpDpB,EAAQoB,cAEnBtC,EAAK8G,iBAAmB,WACpB,IAQIC,EAAgB7E,EAAQ8E,IAAI,SAAS5D,GAAQ,OAR3B,SAASA,GAC3B,OACI6D,QAAS7D,EAAO6D,QAChBjE,MAAOI,EAAOJ,MACdkE,MAAO9D,EAAO8D,MACdC,OAAQ/D,EAAO+D,QAGiCC,CAAgBhE,KAExE,OADA9C,kBAAkBC,IAAI,6BAA8BwG,GAC7CA,GAEX/G,EAAKqH,kBAAoB,WAErB,OADA/G,kBAAkBC,IAAI,8BAA+B0B,GAC9CA,GAEXjC,EAAKsH,kBAAoB,SAACC,EAAcC,GAEpC,OADAlH,kBAAkBC,IAAI,8BAA+BgH,EAAcC,GAChEvF,GAAkBsF,IAGlBA,GAAgB,GACZrF,GAAWA,EAAQY,OAASyE,GAE3BvH,EAAKwE,SAASzC,cACdzB,kBAAkBC,IAAI,oBAAsBgH,GAC5CtF,EAAiBsF,EAEjBvH,EAAKiB,QAAQwG,yBACTxF,eAAgBsF,IAGpBxH,EAAa2H,gBAAgBxF,EAAQqF,GAAcvE,OAChDwE,GAECtE,EAAMhC,EAAQ0C,aAAe,GAE1B3B,QAhBf,IAqBJjC,EAAK2H,KAAO,WAIR,IAHArH,kBAAkBC,IAAI,kBACtBW,EAAQ0G,gBAAgB,WACxB1G,EAAQ0G,gBAAgB,OACjB1G,EAAQ2G,YACX3G,EAAQ4G,YAAY5G,EAAQ2G,YAEhC7H,EAAKyG,QACLzG,EAAKwE,SAASzC,eAGlB/B,EAAKQ,QAAU,WACXR,EAAK2H,OACLjG,EAASlB,UAETR,EAAKgB,MACLV,kBAAkBC,IAAI,4DAI1BP,EAAKK,MAAQ,SAAC0H,GACV,IAAMC,EAAShI,EAAK+H,GACpB,OAAO,WACH,OAAOC,EAAOC,MAAMjI,EAAMkI,aAG3BlI,qFChUX,IAAAH,EAAAD,EAAA,aAqCiB,SAASa,EAAcC,EAAiBQ,EAASiH,GAC9D,IAAMC,KAEN9H,kBAAkBC,IAAI,yBACtB,IAAMP,KAuMN,OA5LAoI,EAAeC,QAAU,WACrBF,EAASjE,YAAW,GACpBiE,EAASlH,QAAQqH,uBACjBhI,kBAAkBC,IAAI,+BAG1B6H,EAAeG,eAAiB,WAC5BH,EAAeI,WACflI,kBAAkBC,IAAI,sCAG1B6H,EAAeK,MAAQ,WACnBnI,kBAAkBC,IAAI,4BACnB4H,EAAS/C,YAAcrD,cAAcoG,EAAS/C,YAAcT,mBAC3DwD,EAASlH,QAAQyH,oBACjBP,EAAS3D,SAASG,oBAI1ByD,EAAeO,WAAa,WASxBrI,kBAAkBC,IAAI,kCAG1B6H,EAAeQ,eAAiB,WAE5B,IAAInD,EAAUvE,EAAQwE,UAAYC,KAAkBlF,IAAiBY,iBAAeX,EAAgBkF,YAChGiD,EAAOV,EAASlE,mBAAqBkE,EAASlE,mBAAmB4E,KAAO,GACxEC,GACApD,SAAUD,EAAUE,IAAWzE,EAAQwE,SACvCmD,KAAMA,GAIVvI,kBAAkBC,IAAI,oCAAqCuI,GAC3DX,EAASlH,QAAQ8H,eAAcD,IAGnCV,EAAe3B,MAAQ,WACnB,OAAG0B,EAAS/C,aAAeT,kBAAiBwD,EAAS/C,aAAe4D,gBAGjE9H,EAAQuH,QAGRvH,EAAQ+H,OAGR/H,EAAQ0C,cAAgB1C,EAAQwE,WAGnCpF,kBAAkBC,IAAI,iCACtB4H,EAAS3D,SAASK,kBAGtBuD,EAAetE,KAAO,WACb5C,EAAQgI,QAAUf,EAAS/C,aAAeL,kBAC3CzE,kBAAkBC,IAAI,2BACtB4H,EAAS3D,SAAS2E,mBAK1Bf,EAAegB,QAAU,WACrB9I,kBAAkBC,IAAI,8BACtB4H,EAAS3D,SAASO,kBAItBqD,EAAeI,SAAW,WACtB,IAAIa,EAAanI,EAAQoI,SACzB,IAAID,EACA,OAAO,EAGX,IAAI3D,EAAWxE,EAAQwE,SAAUgB,EAAWxF,EAAQ0C,YAChD0F,EA7FQ,SAAUC,EAAKC,EAAK5G,GAChC,OAAOD,KAAKC,IAAID,KAAK6G,IAAID,EAAK3G,GAAM4G,GA4FrBC,EAAUJ,EAAWvG,OAAQ,EAAIuG,EAAWK,IAAIL,EAAWvG,OAAS,GAAK,GAAM4C,EAAU,EAAG,GAE3GpF,kBAAkBC,IAAI,8BAAwC,IAAT+I,GAErDnB,EAAS9C,UAAmB,IAATiE,GACnBnB,EAASlH,QAAQ0I,kBACbC,cAAwB,IAATN,EACf5C,SAAWA,EACXhB,SAAUA,KAIlB0C,EAAeyB,QAAU,WACrBvJ,kBAAkBC,IAAI,6BAG1B6H,EAAe0B,WAAa,WACxB,IAAMpD,EAAWxF,EAAQ0C,YACnB8B,EAAWxE,EAAQwE,SACrBqE,MAAMrE,KAINyC,EAAS/D,aAAgBlD,EAAQgI,QACjCf,EAAS3D,SAASO,iBAEtBzE,kBAAkBC,IAAI,iCAClBmG,SAAUA,EACVhB,SAAUA,KAEVyC,EAAS/C,aAAeL,iBAAiBoD,EAAS/D,cAClD+D,EAASlH,QAAQ+I,gBACbtD,SAAUA,EACVhB,SAAUA,MAKtB0C,EAAe6B,OAAS,WACpB3J,kBAAkBC,IAAI,8BAE1B6H,EAAevG,QAAU,WACrBsG,EAAS9D,YAAW,GACpB/D,kBAAkBC,IAAI,6BAA8BW,EAAQ0C,aAC5DuE,EAASlH,QAAQiJ,gBACbxD,SAAWxF,EAAQ0C,eAG3BwE,EAAe+B,OAAS,WAChBhC,EAAS/D,cAGb9D,kBAAkBC,IAAI,6BACtB4H,EAAS9D,YAAW,GACpB8D,EAASlH,QAAQmJ,oBAIrBhC,EAAeiC,QAAU,WACrB/J,kBAAkBC,IAAI,6BAA8B4H,EAAS/C,YAC1D+C,EAAS/D,YACR+D,EAAS3D,SAAS2E,iBACbhB,EAAS/C,YAAcL,iBAC5BoD,EAAS3D,SAAS8F,kBAI1BlC,EAAemC,aAAe,WAE1BjK,kBAAkBC,IAAI,kCAAmCoC,KAAK6H,MAAuB,IAAjBtJ,EAAQ6E,SAC5EoC,EAASlH,QAAQwJ,kBACb1E,OAAQpD,KAAK6H,MAAuB,IAAjBtJ,EAAQ6E,QAC3BK,KAAMlF,EAAQgF,SAItBkC,EAAea,MAAQ,WACnB,IAAMyB,EAAQxJ,EAAQ+H,OAAS/H,EAAQ+H,MAAMyB,MAAS,EAChDC,GACFC,GAAIF,KAAOG,uBAAsBC,OAAS,4BAA6BC,QAAU,6BACjFC,GAAIN,KAAOO,iCAAgCH,OAAS,4BAA6BC,QAAU,6BAC3FG,GAAIR,KAAOS,+BAA8BL,OAAS,wBAAyBC,QAAU,yBACrFK,GAAIV,KAAOW,8BAA6BP,OAAS,uBAAwBC,QAAU,wBACnFO,GAAIZ,KAAOa,oBAAmBT,OAAS,2BAA4BC,QAAU,6BAC/EL,IAAO,EACTC,EAAa1B,MAAQ/H,EAAQ+H,MAE7B3I,kBAAkBC,IAAI,2BAA4BoK,GAjLtC,SAAS1B,GACrBd,EAAS3D,SAASwE,eAClBb,EAAS1B,QACT0B,EAASlH,QAAQuK,QAAOvC,GA+KxBwC,CAAQd,IAKZe,OAAOC,KAAKvD,GAAgBwD,QAAQ,SAAAC,GAChC3K,EAAQ4K,oBAAoBD,EAAWzD,EAAeyD,IACtD3K,EAAQ6K,iBAAiBF,EAAWzD,EAAeyD,MAGvD7L,EAAKQ,QAAU,WACXF,kBAAkBC,IAAI,6BAEtBmL,OAAOC,KAAKvD,GAAgBwD,QAAQ,SAAAC,GAChC3K,EAAQ4K,oBAAoBD,EAAWzD,EAAeyD,OAGvD7L","file":"ovenplayer.provider.html5.js","sourcesContent":["import CoreProvider from \"api/provider/Core\";\n\nimport {PROVIDER_HTML5, STATE_ERROR, ERROR} from \"api/constants\";\n\n/**\n * @brief   html5 provider extended core.\n * @param   element video element.\n * @param   playerConfig    config.\n * */\n\nconst Html5 = function(element, playerConfig){\n\n    let that = CoreProvider(PROVIDER_HTML5, element, playerConfig);\n\n    let super_destroy  = that.super('destroy');\n    OvenPlayerConsole.log(\"HTML5 PROVIDER LOADED.\");\n\n    that.destroy = () =>{\n        super_destroy();\n\n        OvenPlayerConsole.log(\"HTML5 : PROVIDER DESTROYED.\");\n    };\n\n    return that;\n\n};\n\nexport default Html5;","/**\n * Created by hoho on 2018. 6. 27..\n */\nimport Events from \"utils/events\";\nimport EventsListener from \"api/provider/Listener\";\nimport {\n    STATE_IDLE, STATE_PLAYING, STATE_PAUSED, STATE_COMPLETE,\n    PLAYER_STATE, PLAYER_COMPLETE, PLAYER_PAUSE, PLAYER_PLAY,\n    CONTENT_LEVELS, CONTENT_LEVEL_CHANGED, CONTENT_TIME, CONTENT_CAPTION_CUE_CHANGED,\n    PLAYBACK_RATE_CHANGED, CONTENT_MUTE, PROVIDER_HTML5, PROVIDER_WEBRTC, PROVIDER_DASH, PROVIDER_HLS\n} from \"api/constants\";\nimport _ from \"utils/underscore.js\";\nimport Promise, {resolved} from \"api/shims/promise\";\n\nlet extractVideoElement = function(providerName, extendedElement){\n    if(_.isElement(extendedElement)){\n        return extendedElement;\n    }\n    if(providerName === PROVIDER_DASH){\n        return extendedElement.getVideoElement();\n    }else if(providerName === PROVIDER_HLS){\n        return extendedElement.media;\n    }\n    return null;\n};\n\n/**\n * @brief   Core Provider.\n * @param   providerName provider name\n * @param   extendedElement extended media object by mse. or video element.\n * @param   playerConfig  player config\n * @param   onLoad on load handler\n * */\nconst Core = function (providerName, extendedElement, playerConfig, onLoad){\n    OvenPlayerConsole.log(\"CORE loaded. \");\n\n    let that = Object.assign({\n        on: Events.on,\n        once: Events.once,\n        off: Events.off,\n        trigger: Events.trigger\n    });\n\n\n    let elVideo = extractVideoElement(providerName, extendedElement);\n    let listener = EventsListener(providerName, extendedElement, elVideo, that);\n    let canSeek = false;\n    let seeking = false;\n    let state = STATE_IDLE;\n    let buffer = 0;\n    let currentQuality = -1;\n    let sources = [];\n    //let isLive = false;\n\n    let posterImage = playerConfig.getConfig().image||\"\";\n    elVideo.playbackRate = elVideo.defaultPlaybackRate = playerConfig.getDefaultPlaybackRate();\n\n    const setQualityLevelBySources = (sources) =>{\n        const pickQuality = (sources) =>{\n            var quality = Math.max(0, currentQuality);\n            const label =\"\";\n            if (sources) {\n                for (var i = 0; i < sources.length; i++) {\n                    if (sources[i].default) {\n                        quality = i;\n                    }\n                    if (playerConfig.getQualityLabel() && sources[i].label === playerConfig.getQualityLabel() ) {\n                        return i;\n                    }\n                }\n            }\n            return quality;\n        };\n\n        currentQuality = pickQuality(sources);\n    };\n\n    const _load = (lastPlayPosition) =>{\n        const source =  sources[currentQuality];\n        if(onLoad){\n            onLoad(source, lastPlayPosition);\n        }else{\n            OvenPlayerConsole.log(\"source loaded : \", source, \"lastPlayPosition : \"+ lastPlayPosition);\n            let previousSource = elVideo.src;\n            const sourceElement = document.createElement('source');\n\n            sourceElement.src = source.file;\n            const sourceChanged = (sourceElement.src !== previousSource);\n            if (sourceChanged) {\n                elVideo.src = sources[currentQuality].file;\n                // Do not call load if src was not set. load() will cancel any active play promise.\n                if (previousSource) {\n                    elVideo.load();\n                }\n            }else if(lastPlayPosition == 0 && elVideo.currentTime > 0){\n                that.seek(lastPlayPosition);\n            }\n            if(lastPlayPosition > 0){\n                that.seek(lastPlayPosition);\n                that.play();\n            }\n            that.trigger(CONTENT_LEVELS, {\n                currentQuality: currentQuality\n            });\n\n            if(posterImage){\n                elVideo.poster = posterImage;\n            }\n        }\n    };\n\n\n    that.getCurrentSource = () => {\n        OvenPlayerConsole.log(\"CORE : getCurrentSource() \", sources[currentQuality]);\n        return sources[currentQuality];\n    };\n\n    that.canSeek = () => { OvenPlayerConsole.log(\"CORE : canSeek() \", canSeek); return canSeek;};\n    that.setCanSeek = (canSeek_) => {  OvenPlayerConsole.log(\"CORE : setCanSeek() \", canSeek_);  canSeek = canSeek_; };\n\n    that.isSeeking = ()=>{OvenPlayerConsole.log(\"CORE : isSeeking() \", seeking); return seeking;};\n    that.setSeeking = (seeking_)=>{ OvenPlayerConsole.log(\"CORE : setSeeking() \", seeking_); seeking = seeking_;};\n\n    //that.isLive = ()=>{return isLive;};\n    //that.setLive = (live)=>{isLive = live;};\n\n    that.setPlayerElement = (element) => {\n        OvenPlayerConsole.log(\"CORE : setPlayerElement() \", element);\n        elVideo = element;\n    };\n\n    that.setState = (newState) => {\n        if(state != newState){\n            let prevState = state;\n            switch(newState){\n                case STATE_COMPLETE :\n                    that.trigger(PLAYER_COMPLETE);\n                    break;\n                case STATE_PAUSED :\n                    that.trigger(PLAYER_PAUSE, {\n                        prevState: state\n                    });\n                    break;\n                case STATE_PLAYING :\n                    that.trigger(PLAYER_PLAY, {\n                        prevState: state\n                    });\n                    break;\n            }\n            state= newState;\n            OvenPlayerConsole.log(\"CORE : setState() \", state);\n            that.trigger(PLAYER_STATE, {\n                prevstate: prevState,\n                newstate: state\n            });\n        }\n    };\n    that.getState = () =>{\n        OvenPlayerConsole.log(\"CORE : getState() \", state);\n        return state;\n    };\n    that.setBuffer = (newBuffer) => {\n        OvenPlayerConsole.log(\"CORE : setBuffer() \", newBuffer);\n        buffer = newBuffer;\n    };\n    that.getBuffer = () => {\n        OvenPlayerConsole.log(\"CORE : getBuffer() \", buffer);\n        return buffer;\n    };\n    that.getDuration = () => {\n        //ToDo : You consider hlsjs. But not now because we don't support hlsjs.\n        let isLive = (elVideo.duration == Infinity? true : (providerName === PROVIDER_DASH? extendedElement.isDynamic() : false));\n        OvenPlayerConsole.log(\"CORE : getDuration() \", isLive ?  Infinity : elVideo.duration);\n        return isLive ?  Infinity : elVideo.duration;\n    };\n    that.getPosition = () => {\n        OvenPlayerConsole.log(\"CORE : getPosition() \", elVideo.currentTime);\n        return elVideo.currentTime;\n    };\n    that.setVolume = (volume) =>{\n        OvenPlayerConsole.log(\"CORE : setVolume() \", volume);\n        elVideo.volume = volume/100;\n    };\n    that.getVolume = () =>{\n        OvenPlayerConsole.log(\"CORE : getVolume() \", elVideo.volume*100);\n        return elVideo.volume*100;\n    };\n    that.setMute = (state) =>{\n\n        if (typeof state === 'undefined') {\n\n            elVideo.muted = !elVideo.muted;\n\n            that.trigger(CONTENT_MUTE, {\n                mute: elVideo.muted\n            });\n\n        } else {\n\n            elVideo.muted = state;\n\n            that.trigger(CONTENT_MUTE, {\n                mute: elVideo.muted\n            });\n        }\n        OvenPlayerConsole.log(\"CORE : setMute() \", elVideo.muted);\n        return elVideo.muted;\n    };\n    that.getMute = () =>{\n        OvenPlayerConsole.log(\"CORE : setMute() \", elVideo.muted);\n        return elVideo.muted;\n    };\n\n    that.preload = (sources_, lastPlayPosition) =>{\n        OvenPlayerConsole.log(\"CORE : preload() \", sources_, lastPlayPosition);\n        sources = sources_;\n        setQualityLevelBySources(sources);\n        _load(lastPlayPosition || 0);\n    };\n    that.load = (sources_) =>{\n        OvenPlayerConsole.log(\"CORE : load() \", sources_);\n        sources = sources_;\n        setQualityLevelBySources(sources);\n        _load(sources_.starttime || 0);\n    };\n\n    that.play = () =>{\n        OvenPlayerConsole.log(\"CORE : play() \");\n        if( that.getState() !== STATE_PLAYING){\n            elVideo.play();\n        }\n    }\n    that.pause = () =>{\n        OvenPlayerConsole.log(\"CORE : pause() \");\n        if( that.getState() == STATE_PLAYING){\n            elVideo.pause();\n        }\n    };\n    that.seek = (position) =>{\n        OvenPlayerConsole.log(\"CORE : seek() \", position);\n        elVideo.currentTime = position;\n    };\n    that.setPlaybackRate = (playbackRate) =>{\n        that.trigger(PLAYBACK_RATE_CHANGED, {playbackRate : playbackRate});\n        OvenPlayerConsole.log(\"CORE : setPlaybackRate() \", playbackRate);\n        return elVideo.playbackRate = elVideo.defaultPlaybackRate = playbackRate;\n    };\n    that.getPlaybackRate = () =>{\n        OvenPlayerConsole.log(\"CORE : getPlaybackRate() \", elVideo.playbackRate);\n        return elVideo.playbackRate;\n    };\n    that.getQualityLevels = () => {\n        var getQualityLevel = function(source) {\n            return {\n                bitrate: source.bitrate,\n                label: source.label,\n                width: source.width,\n                height: source.height\n            };\n        }\n        let qualityLevels = sources.map(function(source){return getQualityLevel(source)});\n        OvenPlayerConsole.log(\"CORE : getQualityLevels() \", qualityLevels);\n        return qualityLevels;\n    };\n    that.getCurrentQuality = () => {\n        OvenPlayerConsole.log(\"CORE : getCurrentQuality() \", currentQuality);\n        return currentQuality;\n    };\n    that.setCurrentQuality = (qualityIndex, needLoad) => {\n        OvenPlayerConsole.log(\"CORE : setCurrentQuality() \", qualityIndex, needLoad);\n        if(currentQuality == qualityIndex){\n            return false;\n        }\n        if(qualityIndex > -1){\n            if(sources && sources.length > qualityIndex){\n                //that.pause();\n                that.setState(STATE_IDLE);\n                OvenPlayerConsole.log(\"source changed : \" + qualityIndex);\n                currentQuality = qualityIndex;\n\n                that.trigger(CONTENT_LEVEL_CHANGED, {\n                    currentQuality: qualityIndex\n                });\n\n                playerConfig.setQualityLabel(sources[qualityIndex].label);\n                if(needLoad){\n\n                    _load(elVideo.currentTime || 0);\n                }\n                return currentQuality;\n            }\n        }\n    };\n\n    that.stop = () =>{\n        OvenPlayerConsole.log(\"CORE : stop() \");\n        elVideo.removeAttribute('preload');\n        elVideo.removeAttribute('src');\n        while (elVideo.firstChild) {\n            elVideo.removeChild(elVideo.firstChild);\n        }\n        that.pause();\n        that.setState(STATE_IDLE);\n    };\n\n    that.destroy = () =>{\n        that.stop();\n        listener.destroy();\n        //elVideo.remove();\n        that.off();\n        OvenPlayerConsole.log(\"CORE : destroy() player stop, listener, event destroied\");\n    };\n\n    //XXX : This is es6. So we can't \"prototype export\". Finally I consider this method.\n    that.super = (name) => {\n        const method = that[name];\n        return function(){\n            return method.apply(that, arguments);\n        };\n    };\n    return that;\n\n};\n\nexport default Core;","import {\n    ERROR,\n    STATE_IDLE,\n    STATE_PLAYING,\n    STATE_STALLED,\n    STATE_LOADING,\n    STATE_COMPLETE,\n    STATE_PAUSED,\n    STATE_ERROR,\n    CONTENT_COMPLETE,\n    CONTENT_SEEK,\n    CONTENT_BUFFER_FULL,\n    CONTENT_SEEKED,\n    CONTENT_BUFFER,\n    CONTENT_TIME,\n    CONTENT_VOLUME,\n    CONTENT_META,\n    PLAYER_UNKNWON_ERROR,\n    PLAYER_UNKNWON_OPERATION_ERROR,\n    PLAYER_UNKNWON_NEWWORK_ERROR,\n    PLAYER_UNKNWON_DECODE_ERROR,\n    PLAYER_FILE_ERROR,\n    PROVIDER_HTML5,\n    PROVIDER_WEBRTC,\n    PROVIDER_DASH,\n    PROVIDER_HLS\n} from \"api/constants\";\n\n\n/**\n * @brief   Trigger on various video events.\n * @param   providerName child Provider Name\n * @param   extendedElement extended media object by mse.\n * @param   element elVideo  video\n * @param   Provider provider  html5Provider\n * */\n\nconst Listener = function(providerName, extendedElement, elVideo, provider){\n    const lowLevelEvents = {};\n\n    OvenPlayerConsole.log(\"EventListener loaded.\");\n    const that = {};\n    const between = function (num, min, max) {\n        return Math.max(Math.min(num, max), min);\n    }\n    const onError = function(error){\n        provider.setState(STATE_ERROR);\n        provider.pause();\n        provider.trigger(ERROR, error );\n    };\n\n    //Fires when the browser can start playing the audio/video\n    lowLevelEvents.canplay = () => {\n        provider.setCanSeek(true);\n        provider.trigger(CONTENT_BUFFER_FULL);\n        OvenPlayerConsole.log(\"EventListener : on canplay\");\n    };\n    //Fires when the duration of the audio/video is changed\n    lowLevelEvents.durationchange = () => {\n        lowLevelEvents.progress();\n        OvenPlayerConsole.log(\"EventListener : on durationchange\");\n    };\n    //Fires when the current playlist is ended\n    lowLevelEvents.ended = () => {\n        OvenPlayerConsole.log(\"EventListener : on ended\");\n        if(provider.getState() != STATE_IDLE && provider.getState() != STATE_COMPLETE){\n            provider.trigger(CONTENT_COMPLETE);\n            provider.setState(STATE_COMPLETE);\n        }\n    };\n    //Fires when the browser has loaded the current frame of the audio/video\n    lowLevelEvents.loadeddata = () => {\n        //Do nothing Because this causes chaos by loadedmetadata.\n        /*\n        var metadata = {\n            duration: elVideo.duration,\n            height: elVideo.videoHeight,\n            width: elVideo.videoWidth\n        };\n        provider.trigger(CONTENT_META, metadata);*/\n        OvenPlayerConsole.log(\"EventListener : on loadeddata\");\n    };\n    //Fires when the browser has loaded meta data for the audio/video\n    lowLevelEvents.loadedmetadata = () => {\n        //ToDo : You consider hlsjs. But not now because we don't support hlsjs.\n        let isLive = (elVideo.duration == Infinity? true : (providerName === PROVIDER_DASH? extendedElement.isDynamic() : false));\n        let type = provider.getCurrentSource() ? provider.getCurrentSource().type : \"\";\n        var metadata = {\n            duration: isLive ?  Infinity : elVideo.duration,\n            type :type\n        };\n        //provider.setLive(isLive);\n\n        OvenPlayerConsole.log(\"EventListener : on loadedmetadata\", metadata);\n        provider.trigger(CONTENT_META, metadata);\n    };\n    //Fires when the audio/video has been paused\n    lowLevelEvents.pause = () => {\n        if(provider.getState() === STATE_COMPLETE ||provider.getState() === STATE_ERROR){\n            return false;\n        }\n        if(elVideo.ended){\n            return false;\n        }\n        if(elVideo.error){\n            return false;\n        }\n        if(elVideo.currentTime === elVideo.duration){\n            return false;\n        }\n        OvenPlayerConsole.log(\"EventListener : on pause\");\n        provider.setState(STATE_PAUSED);\n    };\n    //Fires when the audio/video has been started or is no longer paused\n    lowLevelEvents.play = () => {\n        if (!elVideo.paused && provider.getState() !== STATE_PLAYING) {\n            OvenPlayerConsole.log(\"EventListener : on play\");\n            provider.setState(STATE_LOADING);\n        }\n\n    };\n    //Fires when the audio/video is playing after having been paused or stopped for buffering\n    lowLevelEvents.playing = () => {\n        OvenPlayerConsole.log(\"EventListener : on playing\");\n        provider.setState(STATE_PLAYING);\n        //provider.trigger(PROVIDER_FIRST_FRAME);\n    };\n    //Fires when the browser is downloading the audio/video\n    lowLevelEvents.progress = () => {\n        let timeRanges = elVideo.buffered;\n        if(!timeRanges ){\n            return false;\n        }\n\n        let duration = elVideo.duration, position = elVideo.currentTime;\n        let buffered = between( (timeRanges.length> 0 ? timeRanges.end(timeRanges.length - 1) : 0 ) / duration, 0, 1);\n\n        OvenPlayerConsole.log(\"EventListener : on progress\", buffered*100);\n\n        provider.setBuffer(buffered*100);\n        provider.trigger(CONTENT_BUFFER, {\n            bufferPercent: buffered*100,\n            position:  position,\n            duration: duration\n        });\n    };\n    //Fires when the browser is trying to get media data, but data is not available\n    lowLevelEvents.stalled = () => {\n        OvenPlayerConsole.log(\"EventListener : on stall\");\n    };\n    //Fires when the current playback position has changed\n    lowLevelEvents.timeupdate = () => {\n        const position = elVideo.currentTime;\n        const duration = elVideo.duration;\n        if (isNaN(duration)) {\n            return;\n        }\n\n        if(!provider.isSeeking() && !elVideo.paused){\n            provider.setState(STATE_PLAYING);\n        }\n        OvenPlayerConsole.log(\"EventListener : on timeupdate\" , {\n            position: position,\n            duration: duration\n        });\n        if (provider.getState() === STATE_PLAYING || provider.isSeeking()) {\n            provider.trigger(CONTENT_TIME, {\n                position: position,\n                duration: duration\n            });\n        }\n\n    };\n    lowLevelEvents.resize = () => {\n        OvenPlayerConsole.log(\"EventListener : on resize\");\n    };\n    lowLevelEvents.seeking = () => {\n        provider.setSeeking(true);\n        OvenPlayerConsole.log(\"EventListener : on seeking\", elVideo.currentTime);\n        provider.trigger(CONTENT_SEEK,{\n            position : elVideo.currentTime\n        });\n    };\n    lowLevelEvents.seeked = () => {\n        if(!provider.isSeeking()){\n            return;\n        }\n        OvenPlayerConsole.log(\"EventListener : on seeked\");\n        provider.setSeeking(false);\n        provider.trigger(CONTENT_SEEKED);\n    };\n\n    //Fires when the video stops because it needs to buffer the next frame\n    lowLevelEvents.waiting = () => {\n        OvenPlayerConsole.log(\"EventListener : on waiting\", provider.getState());\n        if(provider.isSeeking()){\n            provider.setState(STATE_LOADING);\n        }else if(provider.getState() == STATE_PLAYING){\n            provider.setState(STATE_STALLED);\n        }\n    };\n\n    lowLevelEvents.volumechange = () => {\n\n        OvenPlayerConsole.log(\"EventListener : on volumechange\", Math.round(elVideo.volume * 100));\n        provider.trigger(CONTENT_VOLUME, {\n            volume: Math.round(elVideo.volume * 100),\n            mute: elVideo.muted\n        });\n    };\n\n    lowLevelEvents.error = () => {\n        const code = (elVideo.error && elVideo.error.code) || 0;\n        const errorCodeGen = ({\n            0: {code : PLAYER_UNKNWON_ERROR, reason : \"Unknown html5 video error\", message : \"Unknown html5 video error\"},\n            1: {code : PLAYER_UNKNWON_OPERATION_ERROR, reason : \"Unknown operation aborted\", message : \"Unknown operation aborted\"},\n            2: {code : PLAYER_UNKNWON_NEWWORK_ERROR, reason : \"Unknown network error\", message : \"Unknown network error\"},\n            3: {code : PLAYER_UNKNWON_DECODE_ERROR, reason : \"Unknown decode error\", message : \"Unknown decode error\"},\n            4: {code : PLAYER_FILE_ERROR, reason : \"File could not be played\", message : \"File could not be played\"}\n        }[code]||0);\n        errorCodeGen.error = elVideo.error;\n\n        OvenPlayerConsole.log(\"EventListener : on error\", errorCodeGen);\n        onError(errorCodeGen);\n    };\n\n\n\n    Object.keys(lowLevelEvents).forEach(eventName => {\n        elVideo.removeEventListener(eventName, lowLevelEvents[eventName]);\n        elVideo.addEventListener(eventName, lowLevelEvents[eventName]);\n    });\n\n    that.destroy = () =>{\n        OvenPlayerConsole.log(\"EventListener : destroy()\");\n\n        Object.keys(lowLevelEvents).forEach(eventName => {\n            elVideo.removeEventListener(eventName, lowLevelEvents[eventName]);\n        });\n    };\n    return that;\n};\n\nexport default Listener;"],"sourceRoot":""}